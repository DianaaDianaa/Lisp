;1.Write a function to check if an atom is member of a list (the list is non-liniar)

(defun check (l elem)
    (cond
    ((and (atom l) (equal l elem)) t)
    ((atom l) nil)
    (t (some #'identity (mapcar #'(lambda (a)  (check a elem)) l)))
    )
)



;2.Write a function that returns the sum of numeric atoms in a list, at any level.

(defun mySum (l)
    (cond
    ((numberp l) l)
    ((atom l) 0)
    (t (apply #'+ (mapcar #'mySum l)))
    )
)

(princ (mySum '(1 2 (3 (a) b c))))



;3.Define a function to tests the membership of a node in a n-tree represented as (root
;list_of_nodes_subtree1 ... list_of_nodes_subtreen)
;Eg. tree is (a (b (c)) (d) (E (f))) and the node is "b" => true

(defun checkNode (l node)
    (cond
    ((and (atom l) (equal l node)) t)
    ((atom l) nil)
    (t (some #'identity (mapcar #'(lambda (a) (checkNode a node)) l)))
    )
)

(princ (checkNode '(a (b (c)) (d) (E (f))) 'b))



;4.Write a function that returns the product of numeric atoms in a list, at any level.

; prod(l) = 
; = l, if l is a number
; = 1, if l is an atom
; = prod(l1) * prod(l2) * ... * prod(ln), otherwise (l is a list)

(defun prod (l)
    (cond
    ((numberp l) l)
    ((atom l) 1)
    (t (apply #'* (mapcar #'prod l)))
    )
)

(princ (prod '(1 2 a (b () c (3 (3 2 ()))))))



;5.Write a function that computes the sum of even numbers and the decrease the sum of odd numbers,
;at any level of a list.

(defun parity (l)
    (cond
    ((equal 0 (mod l 2)) l)
    (t (- l))
    )
)

(defun mySum (l)
    (cond
    ((numberp l) (parity l))
    ((atom l) 0)
    (t (apply #'+ (mapcar #'mySum l)))
    )
)

(princ (mySum '(1 2 a (b () c (3 (3 2 ()))))))



;6.Write a function that returns the maximum of numeric atoms in a list,at any level.

(defun myMax (a b)
    (cond
    ((and (not (numberp a)) (not (numberp b))) nil)
    ((not (numberp a)) b)
    ((not (numberp b)) a)
    ((> a b) a)
    (t b)
    )
)

(defun maxList (l)
    (cond
    ((null l) nil)
    (t (myMax (car l) (maxList (cdr l))))
    )
)

(defun maxForList (l)
    (cond
    ((numberp l) l)
    ((atom l) l)
    (t (apply #'maxList (list (mapcar #'maxForList l))))
    )
)

(princ (maxForList '(0 2 (4 5) 0 (10 (101 2)))))


;7.Write a function that substitutes an element E with all elements 
;of a list L1 at all levels of a given list L.

(defun f (l e)
    (cond
    ((atom l) e)
    (t (mapcar #'(lambda (a) (f a e)) l))
    )
)

(princ (f '(a b (12 (a (c) d 9) k)) 'k))



;8.Write a function to determine the number of nodes on the level k from a n-tree represented as follows:
;(root list_nodes_subtree1 ... list_nodes_subtreen)
;Eg: tree is (a (b (c)) (d) (e (f))) and k=1 => 3 nodes


(defun f (l lvl counter)
    (cond
    ((and (atom l) (equal counter lvl)) 1)
    ((atom l) 0)
    (t (apply '+ (mapcar #' (lambda (a) (f a lvl (+ counter 1))) l)))
    )
)

(princ (f '(a (b (c)) (d) (e (f))) 1 -1))



;9.Write a function that removes all occurrences of an atom from any level of a list.

(defun remAux (l)
    (cond
    ((null l) nil)
    ((and (atom (car l)) (equal (car l) nil)) (remAux (cdr l)))
    ((atom (car l)) (cons (car l) (remAux (cdr l))))
    (t (cons (remAux (car l)) (remAux (cdr l))))
    )
)

(defun remOcc (l e)
    (cond
    ((and (atom l) (equal l e)) nil)
    ((atom l) l)
    (t (apply #'remAux (list (mapcar #'(lambda (a) (remOcc a e)) l))))
    )
)

(princ (remOcc '(3 a b (a (a 9 c) d e (12 (a 9 (a))))) 'a))




;10.. Define a function that replaces one node with another one in a n-tree represented as: root
;list_of_nodes_subtree1... list_of_nodes_subtreen)
;Eg: tree is (a (b (c)) (d) (e (f))) and node 'b' will be replace with node 'g' => tree (a (g (c)) (d) (e (f)))}

(defun f (l elem newElem)
    (cond
    ((and (atom l) (equal l elem)) newElem)
    ((atom l) l)
    (t (apply #'append (list (mapcar #' (lambda (a) (f a elem newElem)) l))))
    )
)

(princ (f ' (a (b (c)) (d) (e (f))) 'b 'g))


;11.Write a function to determine the depth of a list.

(defun myMax(a b)
  (cond
    ((and (not (numberp a)) (not (numberp b))) nil)
    ((not (numberp b))a)
    ((not (numberp a)) b)
    ((> a b) a)
    (t b)
  )
)

(defun findMax (l)
    (cond
    ((null l) nil)
    ((atom l) l)
    (t (myMax (car l) (findMax (cdr l))))
    )
)

(defun findDepth (l depth)
    (cond
    ((atom l) depth)
    (t (apply #'findMax (list (mapcar #'(lambda (a) (findDepth a (+ depth 1))) l))))
    )
)

(princ (findDepth '(a (b (c)) (d) (e (f))) 0))



;15.Write a function that reverses a list together with all its sublists elements, at any level.

(defun myAppend (l p)
    (cond
    ((null l) p)
    (t (cons (car l) (myAppend (cdr l) p)))
    )
)

(defun revAux (l)
    (cond
    ((null l) nil)
    (t (myAppend (revAux (cdr l)) (list (car l))))
    )
)

(defun rev (l)
    (cond
    ((atom l) l)
    (t (apply #'revAux (list (mapcar #'rev l))))
    )
)

(princ (rev '(1 2 3 (4 (5 6 (7 8)) (9 10)) 11 12)))



;16.Write a function that produces the linear list of all atoms of a given list, from all levels, and written in
;the same order. Eg.: (((A B) C) (D E)) --> (A B C D E)

(defun myAppend (l p)
  (cond
    ((null l) p)
    (t (cons (car l) (myAppend (cdr l) p)))
  )
)

(defun myAppendList (l)
    (cond
    ((null l) nil)
    (t (myAppend (car l) (myAppendList (cdr l))))
    )
)

(defun myLinearize (l)
    (cond
    ((atom l) (list l))
    (t (apply #'myAppendList (list (mapcar #'myLinearize l))))
    )
)

(princ (myLinearize '(((A B) C) (D E))))
;9 15 16
